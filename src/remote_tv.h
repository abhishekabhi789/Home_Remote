#include <map>

const int FREQUENCY = 38;

//irsend.sendRaw(power, 121, FREQUENCY);
const uint16_t power[121] = { 1578, 1026, 579, 605, 579, 605, 1446, 605, 1446, 605, 579, 605, 1446, 605, 579, 605, 1446, 605, 579, 605, 1446, 605, 1446, 605, 10860, 1026, 579, 605, 579, 605, 1446, 605, 1446, 605, 579, 605, 1446, 605, 579, 605, 1446, 605, 579, 605, 1446, 605, 1446, 605, 10860, 1026, 579, 605, 579, 605, 1446, 605, 1446, 605, 579, 605, 1446, 605, 579, 605, 1446, 605, 579, 605, 1446, 605, 1446, 605, 10860, 1026, 579, 605, 579, 605, 1446, 605, 1446, 605, 579, 605, 1446, 605, 579, 605, 1446, 605, 579, 605, 1446, 605, 1446, 605, 10860, 1026, 579, 605, 579, 605, 1446, 605, 1446, 605, 579, 605, 1446, 605, 579, 605, 1446, 605, 579, 605, 1446, 605, 1446, 605, 14500 };

//irsend.sendRaw(menu, 25, FREQUENCY);
const uint16_t menu[25] = { 316, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 14500 };

//irsend.sendRaw(ok, 145, FREQUENCY);
const uint16_t ok[145] = { 1893, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 1446, 605, 868, 605, 579, 605, 1446, 605, 12622, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 1446, 605, 868, 605, 579, 605, 1446, 605, 12622, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 1446, 605, 868, 605, 579, 605, 1446, 605, 12622, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 1446, 605, 868, 605, 579, 605, 1446, 605, 12622, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 1446, 605, 868, 605, 579, 605, 1446, 605, 12622, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 1446, 605, 868, 605, 579, 605, 1446, 605, 14500 };

//irsend.sendRaw(up, 121, FREQUENCY);
const uint16_t up[121] = { 1578, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 868, 605, 868, 605, 1157, 605, 1446, 605, 12596, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 868, 605, 868, 605, 1157, 605, 1446, 605, 12596, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 868, 605, 868, 605, 1157, 605, 1446, 605, 12596, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 868, 605, 868, 605, 1157, 605, 1446, 605, 12596, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 868, 605, 868, 605, 1157, 605, 1446, 605, 14500 };

//irsend.sendRaw(down, 25, FREQUENCY);
const uint16_t down[25] = { 316, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 868, 605, 1157, 605, 1157, 605, 579, 605, 14500 };

//irsend.sendRaw(left, 121, FREQUENCY);
const uint16_t left[121] = { 1578, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 1157, 605, 1446, 605, 868, 605, 868, 605, 12622, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 1157, 605, 1446, 605, 868, 605, 868, 605, 12622, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 1157, 605, 1446, 605, 868, 605, 868, 605, 12622, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 1157, 605, 1446, 605, 868, 605, 868, 605, 12622, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 1157, 605, 1446, 605, 868, 605, 868, 605, 14500 };

//irsend.sendRaw(right, 25, FREQUENCY);
const uint16_t right[25] = { 316, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 1446, 605, 579, 605, 579, 605, 1157, 605, 14500 };

//irsend.sendRaw(back, 121, FREQUENCY);
const uint16_t back[121] = { 1578, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 868, 605, 1446, 605, 1157, 605, 868, 605, 12622, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 868, 605, 1446, 605, 1157, 605, 868, 605, 12622, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 868, 605, 1446, 605, 1157, 605, 868, 605, 12622, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 868, 605, 1446, 605, 1157, 605, 868, 605, 12596, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 868, 605, 1446, 605, 1157, 605, 868, 605, 14500 };

//irsend.sendRaw(vol_up, 25, FREQUENCY);
const uint16_t vol_up[25] = { 316, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 1446, 605, 1157, 605, 579, 605, 579, 605, 14500 };

//irsend.sendRaw(vol_down, 145, FREQUENCY);
const uint16_t vol_down[145] = { 1893, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 1446, 605, 1446, 605, 579, 605, 868, 605, 12622, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 1446, 605, 1446, 605, 579, 605, 868, 605, 12622, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 1446, 605, 1446, 605, 579, 605, 868, 605, 12596, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 1446, 605, 1446, 605, 579, 605, 868, 605, 12622, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 1446, 605, 1446, 605, 579, 605, 868, 605, 12596, 1026, 579, 605, 1157, 605, 579, 605, 868, 605, 1157, 605, 579, 605, 579, 605, 1446, 605, 1446, 605, 579, 605, 868, 605, 14500 };


const std::map<String, const uint16_t*> tvCommandMap = {
  { "power", power },
  { "menu", menu },
  { "ok", ok },
  { "nav_up", up },
  { "nav_down", down },
  { "nav_left", left },
  { "nav_right", right },
  { "back", back },
  { "vol_up", vol_up },
  { "vol_down", vol_down }
};

const uint16_t* getTvCommandCode(const String& command) {
  auto it = tvCommandMap.find(command);
  if (it != tvCommandMap.end()) {
    return it->second;
  } else {
    return 0;
  }
}